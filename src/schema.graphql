
type Query {
  info: String!
  feed(filter: String, skip: Int, take: Int, orderBy: LinkOrderByInput): [Link!]!
  all_students:[Student_info!]!
  all_users:[User]
  search_student(student_id:ID!):Student_info
  search_user(user_id:ID!):User

}

type Mutation {
  
  add_link(description:String!,url:String!):Link!
  add_student(name:String!,age:Int!):Student_info! 
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote

  
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
}

type Student_info {
    id:ID!
    name:String!
    age:Int!

}


type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}
type Subscription {
  newLink: Link
  newVote: Vote
}

input LinkOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}